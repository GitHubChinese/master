建造者模式：
    将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
    产品类（Product）: 一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有比较多的代码量。在本图中，产品类是一个具体的类，而非抽象类。
实际编程中，产品类可以是由一个抽象类与它的不同实现组成，也可以是由多个抽象类与他们的实现组成。
    具体建造者（ConcreteBuilder）：实现Builder接口，构造和装配各个部件。即组建产品和返回组建好的产品。
    抽象建造者（Builder）：是为创建一个Product对象的各个部件指定的抽象接口。 这样更容易扩展。一般至少会有两个抽象方法，一个用来建造产品，一个是用来
返回产品。
    指挥者（Director）：构建一个使用Builder接口的对象， 负责调用适当的建造者来组建产品，导演类一般不与产品类发生依赖关系，与导演类直接交互的是建造者类。一般来说，导演类被用来封装程序中易变的部分。


适用性：
    1、需要生成的产品对象有复杂的内部结构。
    2、需要生成的产品对象的属性相互依赖，建造者模式可以强迫生成顺序。
    3、 在对象创建过程中会使用到系统中的一些其它对象，这些对象在产品对象的创建过程中不易得到。

优越性：
    1、封装性：使用建造者模式可以使客户端不必知道产品内部组成的细节，客户端就不需要关心每      一个具体的模型内部是如何实现，而关心的是最终的产品。
    2、建造者独立，容易扩展：Builder之间是相互独立的，与其它的Builder无关，对系统的扩展非      常有利。
    3、便于控制细节风险：建造者模式所建造的最终产品更易于控制：由于具体的建造者是独立的，      因此可以对建造过程逐步细化，而不对其他的模块产生任
何影响。

与工厂模式的区别：
    与工厂模式相比，建造者模式仅仅只比工厂模式多了一个“指挥类”的角色。在建造者模式图中，假如把这个指挥类看做是最终调用的客户端，那么图中剩余的部分
就可以看作是一个简单的工厂模式了。
    与工厂模式相比，建造者模式一般用来创建更为复杂的对象，因为对象的创建过程更为复杂，因此将对象的创建过程独立出来组成一个新的类——指挥类。也就是说，
工厂模式是将对象的全部创建过程封装在工厂类中，由工厂类向客户端提供最终的产品；而建造者模式中，建造者类一般只提供产品类中各个组件的建造，而将具体建造
过程交付给导演类。由导演类负责将各个组件按照特定的规则组建为产品，然后将组建好的产品交付给客户端。
    中上所述，我认为工厂模式是建造者模式的一部分，换句话说，建造者模式包含了工厂模式。

注：第一次用github,不太熟悉把一个项目或文件上传到github的操作，所以在操作上存在一些问题。例如，我在上传第二次作业的时候，都不知道似乎怎么的，把
第一次上传的作业冲掉了。
    
